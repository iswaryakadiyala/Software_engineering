# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18705zd7KTGAqtohUZ8zCSwpW5kYB6d3V
"""



import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    temperature = a * (time**2) + b * time + c
    return temperature

def main():
    a = float(input("Enter the value of a: "))
    b = float(input("Enter the value of b: "))
    c = float(input("Enter the value of c: "))

    time_values = np.linspace(0, 10, 50)
    temperature_hardcoded = quadratic_model(time_values, a, b, c)

    plt.plot(time_values, temperature_hardcoded, label='Hardcoded coefficients')
    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather Modelling with Quadratic Equation (Hardcoded Coefficients)')
    plt.show()

if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time):
    a = 0.1
    b = -1
    c = 30
    temperature = a*(time**2) + b*time + c
    return temperature

def main():
    time_values = np.linspace(0, 10, 50)
    temperature_values = quadratic_model(time_values)

    plt.plot(time_values, temperature_values, label='Hard coded coefficients')
    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather modeling with quadratic equation (hard coded coefficients)')
    plt.show()

if __name__ == "__main__":
    main()

import matplotlib.pyplot as plt
import numpy as np

def read_coefficients(filename):
   with open(filename, 'r') as f:
        coefficients = [float(line.strip()) for line in f]
   return coefficients

def quadratic_model(time, coefficients):
    a, b, c = coefficients
    temperature = a*(time**2) + b*time + c
    return temperature

def main():
    coefficients = read_coefficients('text.txt')
    time_values = np.linspace(0, 10, 50)
    temperature_values = quadratic_model(time_values, coefficients)
    plt.plot(time_values, temperature_values, label='Coefficients from file')
    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather modeling with quadratic equation (coefficients from file)')
    plt.show()

if __name__ == "__main__":
    main()

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    temperature = a * (time**2) + b * time + c
    return temperature

def main():
    num_sets = int(input("Enter the number of coefficient sets: "))

    coefficient_sets = []
    for i in range(num_sets):
        print(f"\nCoefficient set {i + 1}:")
        a = float(input("Enter the value of a: "))
        b = float(input("Enter the value of b: "))
        c = float(input("Enter the value of c: "))14
        coefficient_sets.append((a, b, c))

    time_values = np.linspace(0, 10, 100)  # Increase number of points for smoother curves

    plt.figure()  # Matplotlib will determine default figure size

    for i, (a, b, c) in enumerate(coefficient_sets):
        temperature = quadratic_model(time_values, a, b, c)
        plt.plot(time_values, temperature, label=f'Set {i+1}: a={a}, b={b}, c={c}')

    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather Modelling with Quadratic Equation (Multiple Sets of Coefficients)')

    # Disable grid
    plt.grid(False)

    plt.show()

if __name__ == '__main__':
    main()
1

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    temperature = a * (time**2) + b * time + c
    return temperature

def main():
    # Hardcoded coefficients
    a1 = 0.1
    b1 = -1
    c1 = 30

    # User-provided coefficients
    a = float(input("Enter the value of a: "))
    b = float(input("Enter the value of b: "))
    c = float(input("Enter the value of c: "))

    time_values = np.linspace(0, 10, 50)

    temperature_hardcoded = quadratic_model(time_values, a1, b1, c1)
    temperature_user = quadratic_model(time_values, a, b, c)

    plt.plot(time_values, temperature_hardcoded, label='Hardcoded coefficients')
    plt.plot(time_values, temperature_user, label='User-provided coefficients')
    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather Modelling with Quadratic Equation (Comparison)')
    plt.show()

if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt
import numpy as np

def read_coefficients(filename):
    with open(filename, 'r') as f:
        lines = f.readlines()
    coefficients_sets = []
    for line in lines:
        coefficients = [float(value) for value in line.strip().split()]
        coefficients_sets.append(coefficients)
    return coefficients_sets

def quadratic_model(time, coefficients):
    a, b, c = coefficients
    temperature = a * (time**2) + b * time + c
    return temperature

def main():
    coefficients_sets = read_coefficients('text1.txt')
    time_values = np.linspace(0, 10, 50)

    for i, coefficients in enumerate(coefficients_sets):
        temperature_values = quadratic_model(time_values, coefficients)
        a, b, c = coefficients
        label = f'Set {i + 1}: a={a}, b={b}, c={c}'
        plt.plot(time_values, temperature_values, label=label)

    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather modeling with quadratic equation (multiple sets of coefficients)')
    plt.show()

if __name__ == "__main__":
    main()

from google.colab import drive
drive.mount('/content/drive')